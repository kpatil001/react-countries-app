{"version":3,"sources":["components/HeaderComponent.jsx","components/SearchCountriesComponent.jsx","components/CardComponent.jsx","components/CountriesComponent.jsx","components/ContinentDropDownComponent.jsx","api/FetchApiService.js","constants.js","components/ModalComponent.jsx","components/ParentComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["HeaderComponent","className","href","Component","SearchCountriesComponent","props","state","countries","handleChange","bind","event","this","callback","target","value","console","log","onChange","map","country","key","CardComponent","flagImg","flag","countryName","name","capital","population","data-toggle","data-target","onClick","modalCallback","src","alt","icon","faCity","faUsers","CountriesComponent","allCountries","selectedCountry","nation","return","region","selectedContinent","ContinentDropDownComponent","continents","default","data-live-search","continent","Promise","resolve","reject","axios","get","then","response","Error","data","catch","err","ModalComponent","class","id","tabindex","role","aria-labelledby","aria-hidden","type","data-dismiss","aria-label","nativeName","scope","subregion","area","timezones","toString","languages","length","reduce","total","language","index","str","currencies","currency","symbol","borders","ParentComponent","countryToShowInModal","setContinent","setCountry","setCountryToShowInModal","getCountriesOfContinent","FetchApiService","retrieveAllCountries","setState","forEach","push","library","add","faSearch","faCoffee","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.613cad0d.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass HeaderComponent extends Component {\n    render() {\n        return (\n            <header>\n                <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\n                    <div className=\"navbar-nav ml-4 mr-auto\"><a href=\"#\" className=\"navbar-brand\">World</a></div>\n                    <div className=\"mr-2\" > <a href=\"#\" className=\"btn btn-secondary\">Dark Mode</a></div>\n                </nav>\n            </header>\n        );\n    }\n}\n\nexport default HeaderComponent","import React, { Component } from 'react'\n\nclass SearchCountriesComponent extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            countries: []\n\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event){\n        this.props.callback(event.target.value);\n    }\n\n    render() {\n        return (\n\n        //     <div className=\"input-group mb-3 dropdown\">\n        //     <div className=\"input-group-prepend\">\n        //         <label className=\"input-group-text\" >Region</label>\n        //     </div>\n        //     <select data-live-search=\"true\" className=\"form-control custom-select\" onChange={this.handleChange}>\n        //             {\n        //                 this.state.continents.map(\n        //                     continent => (<option key={continent} value= {continent}> {continent} </option>)\n        //                 )\n        //             }\n        //     </select>\n        // </div>\n\n\n            <div className=\"input-group input-group mb-3 dropdown\">\n                <div className=\"input-group-prepend\">\n                    <label className=\"input-group-text\">Country</label>\n                </div>\n                \n                {console.log(\"countries value in searchComponent is \", this.props.countries)}\n                <select className=\"form-control custom-select\" onChange={this.handleChange} >\n                    <option value=\"All\">All</option>\n                    {\n                        this.props.countries.map(\n                            country => {\n                                console.log(country);\n                                return (<option key={country} value={country}> {country} </option>)\n                            }\n                        )\n                    }\n                </select>\n\n            </div>\n        );\n    }\n}\n\nexport default SearchCountriesComponent","import React, { Component } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUsers, faCity } from '@fortawesome/free-solid-svg-icons';\nclass CardComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            flagImg: this.props.country.flag,\n            countryName: this.props.country.name,\n            capital: this.props.country.capital,\n            population: this.props.country.population\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <div className=\"col-md-4 mt-3\">\n                    <div className=\"card\">\n                        <a href=\"#\" data-toggle=\"modal\" data-target=\"#exampleModalCenter\" onClick={() => {this.props.modalCallback(this.props.country)} }>\n                            <img className=\"card-img-top imgCard\" src={this.state.flagImg} alt=\"Country image\"/>\n                        </a>\n                        <div className=\"card-footer bg-transparent\">\n                            <div className=\"text-left\"><h5>{this.state.countryName}</h5></div>\n                            <div>\n                                <span className=\"float-left\"><FontAwesomeIcon icon={faCity} /> {this.state.capital}  </span>\n                                <span className=\"float-right\" ><FontAwesomeIcon icon={faUsers} /> {this.state.population}</span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\nexport default CardComponent;","import React, { Component } from 'react';\n\n\nimport CardComponent from './CardComponent';\nclass CountriesComponent extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            allCountries: []\n            // continent : props.selectedContinent\n        };\n        // this.refreshState = this.refreshState.bind(this);\n        // setContinent = setContinent.bind(this);\n    }\n    com\n    render() {\n        // this.refreshState();\n        return (\n            <>\n            <div className=\"container flexstyle\">\n                {console.log(\"value of props :: \", this.props.selectedCountry)}\n                <div className=\" row hidden-md-up w-100\">\n                    <div className=\"card-group\">\n                    {\n                        (this.props.selectedCountry != \"All\") ?\n                            (\n                                this.props.allCountries.map(\n                                    (nation) =>\n                                        <>\n                                            {(nation.name == this.props.selectedCountry) && <CardComponent key={nation.name} country={nation} return />}\n                                        </>\n                                )\n                            ) :\n                            (\n                                this.props.allCountries.map(\n                                    (nation) =>\n                                        <>\n                                            {(nation.region == this.props.selectedContinent || this.props.selectedContinent == \"All\") && <CardComponent key={nation.name} country={nation} modalCallback= {this.props.modalCallback} />}\n                                        </>\n                                )\n                            )\n                    }\n                    </div>\n                </div>\n            </div>\n        </>\n        );\n    }\n}\n\nexport default CountriesComponent;\n","import React, { Component } from 'react'\nimport CountriesComponent, {setContinent} from './CountriesComponent'\n\n\nclass ContinentDropDownComponent extends Component {\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            continents : [\"All\",\"Africa\",\"Americas\",\"Asia\",\"Europe\",\"Oceania\",\"Polar\"],\n            default : \"All\"\n        }\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event){\n        console.log(\"Inside handleChange\");\n        console.log(\"Target value \" , event.target.value);\n        this.props.callback(event.target.value);\n    }\n    render() {\n        return (\n            <div className=\"input-group mb-3 dropdown\">\n                <div className=\"input-group-prepend\">\n                    <label className=\"input-group-text\" >Region</label>\n                </div>\n                <select data-live-search=\"true\" className=\"form-control custom-select\" onChange={this.handleChange}>\n                        {\n                            this.state.continents.map(\n                                continent => (<option key={continent} value= {continent}> {continent} </option>)\n                            )\n                        }\n                </select>\n            </div>\n        );\n    }\n}\n\nexport default ContinentDropDownComponent\n\n","import axios from 'axios'\nimport {API_URL} from '../constants'\n\nclass FetchApiService {\n    retrieveAllCountries(){\n        console.log(\"Inside retrieveAllCountries\")\n        // return axios.get(API_URL).then();\n        return new Promise((resolve,reject)=>{\n            axios.get(API_URL).then((response)=>{\n                if(response[\"data\"])\n                {\n                    resolve(response.data)\n                }\n                else\n                    throw (new Error(\"No data received from Api\"));\n            })\n            .catch((err) => {console.log(err)});\n        });\n    }\n}\n\nexport default new FetchApiService()","export const API_URL = \"https://restcountries.eu/rest/v2/all?fields=name;capital;nativeName;region;subregion;population;area;timezones;borders;currencies;languages;flag;\"","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCity } from '@fortawesome/free-solid-svg-icons';\n\nclass ModalComponent extends Component {\n\n    render() {\n\n        return (\n            <div class=\"modal fade bd-example-modal-lg\" id=\"exampleModalCenter\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\">\n                <div class=\"modal-dialog modal-dialog-centered modal-lg\" role=\"document\">\n                    <div class=\"modalStyle modal-content\">\n                        <div class=\"modal-header\">\n                            <h5 class=\"modal-title\" id=\"exampleModalLongTitle\">Country Detail</h5>\n                            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                        </div>\n                        <div class=\"modal-body\">\n                            <div className=\"container flexstyle\">\n                                <div className=\"row\">\n                                    <div class=\"col\">\n                                        <img className=\"ModalImg\" src={this.props.country.flag} ></img>\n                                    </div>\n                                </div>\n                                <div className=\"row mt-4\">\n                                    <div class=\"col\">\n                                        <div>\n                                            <h4> {this.props.country.name} | {this.props.country.nativeName} </h4>\n                                        </div>\n                                        <div >\n                                            <h6><FontAwesomeIcon icon={faCity} /> {this.props.country.capital} </h6>\n                                        </div>\n                                        <table className=\"table table-borderless table-hover table-sm\">\n                                            {/* <thead class=\"thead-light\">\n                                            <tr>\n                                                <th scope=\"col\">Name</th>\n                                                <td scope=\"col\">{this.props.country.name}</td>\n                                            </tr>\n                                        </thead> */}\n                                            <tbody>\n                                                {/* <tr>\n                                                <th scope=\"row\">Name</th>\n                                                <td>{this.props.country.name}</td>\n                                            </tr> */}\n                                                <tr>\n                                                    <th scope=\"row\">Region</th>\n                                                    <td>{this.props.country.region} - {this.props.country.subregion}</td>\n                                                </tr>\n                                                <tr>\n                                                    <th scope=\"row\">Area</th>\n                                                    <td>{this.props.country.area}</td>\n                                                </tr>\n                                                <tr>\n                                                    <th scope=\"row\">Population</th>\n                                                    <td>{this.props.country.population}</td>\n                                                </tr>\n                                                <tr>\n                                                    <th scope=\"row\">Timezones</th>\n                                                    <td>\n                                                        {(this.props.country.timezones) ?\n                                                            (\n                                                                (this.props.country.timezones.toString())\n                                                            ) :\n                                                            (\"\")\n                                                        }\n                                                    </td>\n\n                                                </tr>\n                                                <tr>\n                                                    <th scope=\"row\">Languages</th>\n                                                    <td>\n\n                                                        {\n                                                            // if languages is not empty\n                                                            (this.props.country.languages) ?\n                                                                (\n                                                                    // if languages has length more than 1\n                                                                    (this.props.country.languages.length > 1) ?\n                                                                        (this.props.country.languages.reduce((total, language, index) => {\n                                                                            let str = language.name;\n                                                                            if (index != this.props.country.languages.length - 1)\n                                                                                str += \",\";\n                                                                            return total + str;\n                                                                        }, \"\"))\n                                                                        :\n                                                                        (this.props.country.languages[0].name)\n                                                                ) :\n                                                                (\"\")\n                                                        }\n                                                    </td>\n\n                                                </tr>\n                                                <tr>\n                                                    <th scope=\"row\">Currencies</th>\n                                                    <td>\n                                                        {(this.props.country.currencies) ?\n                                                            ((this.props.country.currencies.length > 1) ?\n                                                                (this.props.country.currencies.map(\n                                                                    (currency) => (currency.symbol + \"-\" + currency.name + \",\")\n                                                                )\n                                                                )\n                                                                :\n                                                                (this.props.country.currencies[0].symbol + \"-\" + this.props.country.currencies[0].name)\n                                                            ) :\n                                                            (\"\")\n                                                        }\n                                                    </td>\n                                                </tr>\n                                                <tr>\n                                                    <th scope=\"row\">Area</th>\n                                                    <td>{this.props.country.area}</td>\n                                                </tr>\n                                                <tr>\n                                                    <th scope=\"row\">Border Shared With</th>\n                                                    <td>\n                                                        {(this.props.country.borders) ?\n                                                            (\n                                                                (this.props.country.borders.toString())\n                                                            ) :\n                                                            (\"\")\n                                                        }\n                                                    </td>\n\n                                                </tr>\n                                            </tbody>\n                                        </table>\n\n\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\nexport default ModalComponent;","import React, { Component } from 'react'\nimport HeaderComponent from './HeaderComponent';\nimport SearchCountriesComponent from './SearchCountriesComponent'\nimport ContinentDropDownComponent from './ContinentDropDownComponent'\nimport CountriesComponent, { setContinent } from './CountriesComponent';\nimport FetchApiService from '../api/FetchApiService';\nimport ModalComponent from './ModalComponent';\n\n\nclass ParentComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            continent: \"All\",\n            country: \"All\",\n            countryToShowInModal :{},\n            allCountries : []\n        }\n        this.setContinent = this.setContinent.bind(this);\n        this.setCountry = this.setCountry.bind(this);\n        this.setCountryToShowInModal = this.setCountryToShowInModal.bind(this);\n        this.getCountriesOfContinent = this.getCountriesOfContinent.bind(this);\n    }\n\n    componentDidMount(){\n        FetchApiService.retrieveAllCountries()\n        .then(response => {\n            this.setState({allCountries: response})\n            console.log(\"State\",this.state.allCountries)\n        })\n        .catch((err)=>{console.log(err)});\n    }\n\n    setContinent(selectedContinent) {\n        this.setState((state) => {\n            return { continent: selectedContinent, country : \"All\" }\n        });\n    }\n\n    setCountry(selectedCountry){\n        this.setState({country:selectedCountry});\n    }\n\n    setCountryToShowInModal(country){\n        console.log(\"Inside setCoumtryTOshw in Modal Function\");\n        this.setState({countryToShowInModal: country});\n    }\n\n    getCountriesOfContinent(){\n        let countries = [];\n        console.log(\"inside get countries and value of this.continentis\")\n        if(this.state.continent != \"All\")\n        {\n            this.state.allCountries.forEach((country)=>{\n                if(country.region == this.state.continent)\n                    countries.push(country.name);\n            })\n        }\n        console.log(\"return value of getCountriesOfContinent is \",countries);\n        return countries;\n    }\n\n    render() {\n        return (\n            <>\n                <HeaderComponent />\n                <div className=\"container\">\n                    <div className=\"row mt-5\">\n                        <div className=\"col\">\n                            <SearchCountriesComponent countries={this.getCountriesOfContinent()} callback={this.setCountry}/>\n                        </div>\n                        <div className=\"col\">\n                            <ContinentDropDownComponent callback={this.setContinent} />\n                        </div>\n                    </div>\n                    <div id=\"CountryComponent\" className=\"row mt-3\">\n                        <CountriesComponent allCountries={this.state.allCountries} selectedContinent={this.state.continent} selectedCountry={this.state.country} modalCallback={this.setCountryToShowInModal} />\n                    </div>\n                </div>\n                <ModalComponent country={this.state.countryToShowInModal}/>\n            </>\n        )\n    }\n}\nexport default ParentComponent;","import React from 'react';\nimport './App.css';\nimport './bootstrap.css';\nimport './components/HeaderComponent'\nimport ParentComponent from './components/ParentComponent'\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faCoffee, faSearch } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faSearch, faCoffee)\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ParentComponent/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}